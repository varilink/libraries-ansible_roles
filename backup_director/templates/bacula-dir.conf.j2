{#
--------------------------------------------------------------------------------
backup_director/templates/bacula-dir.conf.j2
--------------------------------------------------------------------------------
#}
#-------------------------------------------------------------------------------
# Director
#-------------------------------------------------------------------------------

Director {
  Name = {{ backup_director_name }}
  DIRport = 9101
  QueryFile = "/etc/bacula/scripts/query.sql"
  WorkingDirectory = "/var/lib/bacula"
  PidDirectory = "/run/bacula"
  Password = "{{ backup_director_console_password }}"
  Messages = Daemon
}

#-------------------------------------------------------------------------------
# JobDefs
# - BackupJob = Self explanatory
# - CopyJob = Copy media to Dropbox for disaster recovery
#-------------------------------------------------------------------------------

JobDefs {
  Name = BackupJob
  Type = Backup
  Level = Incremental
  Storage = File
  Messages = Standard
  Priority = 10
}

JobDefs {
  Name = CopyJob
  Type = Copy
  # Has no effect for copy jobs but Client is mandatory for Job directives
  Client = {{ inventory_hostname }}
  Storage = File
  Messages = Standard
  # lower priority than BackupJob so that backups complete before copying media
  Priority = 20
  FileSet = "Full Set"
  Selection Type = PoolUncopiedJobs
}

#-------------------------------------------------------------------------------
# Job
# - Backup jobs for each indivdual host
# - Backup job for the catalog
# - Copy job to copy catalog backup media to Dropbox
# - Copy job to copy server backup media to Dropbox for on-site servers
# - Admin job that reports the status of Dropbox synchronisation on the director
# - Standard restore template provided by the vendor
#-------------------------------------------------------------------------------
{% for hostname in hostnames %}

Job {
  Name = {{ hostname }}
  JobDefs = BackupJob
  Client = {{ hostname }}
{% if backup_linked_to_dropbox %}
{#
We have integration with Dropbox enabled. Copy bootstrap files directly to
Dropbox so that they are held offsite for disaster recovery purposes.
#}
  Write Bootstrap = "/var/lib/bacula/Dropbox/
  {{- backup_copy_folder }}/Bootstrap/%n.bsr"
{% else %}
{#
We don't have integration with Dropbox enabled and so we must write bootstrap
files locally to the backup director's host.
#}
  Write Bootstrap = "/var/lib/bacula/Bootstrap/%n.bsr"
{% endif %}
{#
Use a FileSet that is specific to each server to be backed up and is in fact
derived from the Ansible roles that are deployed to each server.
#}
  FileSet = {{ hostname }}
  {%- if hostname in groups['external'] %}

{#-
If the server is off-site then we use the schedule and default pool for backups
of off-site servers instead. We also use the Storage directive that is
configured to accept connections from outside of the office network for the
storage director that is located on the office network.
#}

    {%- if  backup_director_schedules_active %}

  Schedule = DailyOffSite

    {%- endif %}

  Pool = DailyOffSite

  {%- elif hostname in groups['internal'] %}

{#-
If the server is on-site then use the schedule and default pool for backups of
on-site servers. The schedule overrides the default pool for full backups weekly
and monthly. We can use the default Storage directive for the BackupJob JobDefs
directive, since both the server being backed up and the storage director are
both on the office network.
#}

    {%- if  backup_director_schedules_active %}

  Schedule = DailyOnSite

    {%- endif %}

  Pool = DailyOnSite

  {%- endif %}{# hostname in groups['external'] #}

  {%- if 'backup_storage' in hosts_to_roles_map[hostname]
      and backup_linked_to_dropbox %}

  Client Run After Job = "/etc/bacula/scripts/check-storage-dropbox-status.sh"
  {%- endif %}

}
{% endfor %}{# hostname in hostnames #}

Job {
  Name = BackupCatalog
  JobDefs = BackupJob
  Client = {{ inventory_hostname }}
  FileSet = Catalog
  Level = Full
  Pool = Catalog
{% if  backup_director_schedules_active %}
  Schedule = Catalog
{% endif %}
  # This script provided by the vendor creates an ASCII copy of the catalog
  # Arguments to make_catalog_backup.pl are:
  #  make_catalog_backup.pl <catalog-name>
  RunBeforeJob = "/etc/bacula/scripts/make_catalog_backup.pl MyCatalog"
  # Script provided by vendor that deletes the copy of the catalog
  RunAfterJob  = "/etc/bacula/scripts/delete_catalog_backup"
  # Run after the other backup jobs but before the copy jobs
  Priority = 15
}

Job {
  Name = DailyCatalogCopy
  JobDefs = CopyJob
  Pool = Catalog
{% if  backup_director_schedules_active %}
  Schedule = DailyCatalogCopy
{% endif %}
}

Job {
  Name = DailyCopy
  JobDefs = CopyJob
  Pool = DailyOnSite
{% if  backup_director_schedules_active %}
  Schedule = DailyCopy
{% endif %}
}

Job {
  Name = CheckDropboxStatus
  Type = Admin
  Messages = Standard
  Priority = 10
  # Attributes that are mandatory for a Job but irrelevant for this Job Type
  Client = {{ inventory_hostname }}
  FileSet = "Full Set"
  Pool = DailyOnSite
  Storage = File
  Run Before Job = "/etc/bacula/scripts/check-director-dropbox-status.sh"
}

#
# Standard Restore template, to be changed by Console program
#  Only one such job is needed for all Jobs/Clients/Storage ...
#
Job {
  Name = "Restore Files"
  Type = Restore
  Client={{ inventory_hostname }}
  Storage = File
# The FileSet and Pool directives are not used by Restore Jobs
# but must not be removed
  FileSet="Full Set"
  Pool = DailyOnSite
  Messages = Standard
  Where = /tmp/bacula-restores
}

#-------------------------------------------------------------------------------
# FileSet
# - FileSet directives for each individual server generated by Ansible.
# - Vendor provided FileSet for the catalog backup.
# - Vendor provided standard "Full Set" FileSet, which we use as a default
#   entry where we have to specify a default FileSet but we never actually use
#   it.
#-------------------------------------------------------------------------------
{% for hostname in hostnames %}

FileSet {

  # Client specific fileset for {{ hostname }}
  Name = {{ hostname }}
  Ignore FileSet Changes = yes

  # Catch-all files to include. These will be progressively replaced by role and
  # client files to include from the client specific filesets. According to the
  # Bacula documenation, if a file or directory is duplicated then that will
  # lead to a repeat backup; for example '/' and 'usr'. The documentation
  # doesn't say whether the same is true of an exact duplication. However, this
  # makes it important that our FileSet definitions are as targeted as possible.

  Include {

    Options {
      Compression=GZIP
      signature = MD5
    }

    # Home folders excluding mail directories
    File = /home
    ExcludeDirContaining = maildirfolder

  }

  Exclude {

    # Exclusions in /home that we don't need
    File = /home/*/.ansible
    File = /home/*/.cache
    File = /home/osmc

  }

  Include {

    Options {
      Compression=GZIP
      Signature = MD5
    }

    # APT sources
    File = /etc/apt/sources.list
    File = /etc/apt/sources.list.d

    # Filesystem table
    File = /etc/fstab

    # Cron jobs
    File = /etc/crontab
    File = /etc/cron.daily
    File = /etc/cron.hourly
    File = /etc/cron.monthly
    File = /etc/cron.weekly

    # Network interfaces
    File = /etc/network/interfaces

    # Var localisations
    File = /var/local

  }

  Include {

    # User localisations
    File = /usr/local

    Options {
      Compression=GZIP
      Signature = MD5
    }

    # Exclude /usr/local/share/nginx using a WildDir option here as we want to
    # include specific directories within this path in relevant roles.
    Options {
      Exclude = yes
      WildDir = "/usr/local/share/nginx"
    }

  }

  Exclude {

    File = /usr/local/share/man
    File = /usr/local/share/perl
    File = /usr/local/lib/python3.5
    File = /usr/local/lib/python3.9
    File = /usr/local/lib/arm-linux-gnueabihf/perl

  }

# Include files for each role deployed to this host for which a file is provided
{#-
Define a variable to hold a sorted, unique list of roles for this host that
contain a FileSet snippet file.
#}
{% set host_fileset_roles = [] %}
{#
Loop for each role that is explicitly deployed the current host. These are
provided by the hosts_to_roles_map variable.
#}
  {%- for role in hosts_to_roles_map[hostname] %}
{#
For each role that is explicitly deployed to this host, examine the
fileset_files variable to see if that role has a bacula-fileset.conf file. If it
does then include that file within the FileSet for this host.
#}
    {%- for file in fileset_files %}
      {%- if file | regex_search(role + '/files/bacula-fileset\.conf$') %}
        {{- host_fileset_roles.append(role) or '' }}
      {%- endif %}
    {%- endfor %}{# files #}
{#
For each role that is explicitly deployed to this host, examine the
role_dependencies variable to see if that role pulls in other roles as
dependencies.
#}
    {%- if role_dependencies[role] is defined %}
      {%- for dependency_role in role_dependencies[role] %}
        {%- for file in fileset_files %}
          {%- if file |
                 regex_search(dependency_role + '/files/bacula-fileset\.conf$')
          %}
            {{- host_fileset_roles.append(dependency_role) or '' }}
          {%- endif %}
        {%- endfor %}{# files #}
      {%- endfor %}{# dependency roles #}
    {%- endif %}
  {%- endfor %}{# explicitly deployed roles #}

  {%- for role in host_fileset_roles | sort | unique %}

@/etc/bacula/role-filesets/{{ role }}.conf
  {%- endfor %}


}
{% endfor %}{# hostname in hostnames #}

FileSet {
  Name = Catalog
  Include {
    Options {
      signature = MD5
    }
    File = "/var/lib/bacula/bacula.sql"
  }
}

FileSet {
  Name = "Full Set"
  Include {
    Options {
      signature = MD5
    }
#
#  Put your list of files here, preceded by 'File =', one per line
#    or include an external list with:
#
#    File = <file-name
#
#  Note: / backs up everything on the root partition.
#    if you have other partitions such as /usr or /home
#    you will probably want to add them too.
#
#  By default this is defined to point to the Bacula binary
#    directory to give a reasonable FileSet to backup to
#    disk storage during initial testing.
#
    File = /usr/sbin
  }

#
# If you backup the root directory, the following two excluded
#   files can be useful
#
  Exclude {
    File = /var/lib/bacula
    File = /nonexistant/path/to/file/archive/dir
    File = /proc
    File = /tmp
    File = /sys
    File = /.journal
    File = /.fsck
  }
}
{% if  backup_director_schedules_active %}

#-------------------------------------------------------------------------------
# Schedule
# - Daily backup of the catalog.
# - Daily copy of the catalog backup media to Dropbox.
# - Daily backup of off-site servers, with media drawn from pools for
#   incremental normal backup and full backups weekly and monthly.
# - Daily backup of on-site servers, with media drawn from pools for incremental
#   normal backup and full backups weekly and monthly.
# - Daily copy of backup media for onsite servers to offsite location
#-------------------------------------------------------------------------------

Schedule {
  Name = Catalog
  Run = at 07:05
}

Schedule {
  Name = DailyCatalogCopy
  Run = at 07:35
}

Schedule {
  Name = DailyOffSite
  Run = Level=Full Pool=MonthlyOffSite 1st sat at 02:05
  Run = Level=Full Pool=WeeklyOffSite 2nd-5th sat at 02:05
  Run = Level=Incremental Pool=DailyOffSite sun-fri at 02:05
}

# Daily backup of servers located on the internal office network
Schedule {
  Name = DailyOnSite
  Run = Level=Full Pool=MonthlyOnSite 1st sat at 01:05
  Run = Level=Full Pool=WeeklyOnSite 2nd-5th sat at 01:05
  Run = Level=Incremental Pool=DailyOnSite sun-fri at 01:05
}

Schedule {
  Name = DailyCopy
  Run = Pool= DailyOnSite sun-fri at 03:05
  Run = Pool= WeeklyOnSite  2nd-5th sat at 03:05
  Run = Pool= MonthlyOnSite 1st sat at 03:05
}
{% endif %}

#-------------------------------------------------------------------------------
# Client
#-------------------------------------------------------------------------------

{% for hostname in hostnames %}
Client {
  Name = {{ hostname }}
  Address = {{ hostvars[hostname]['ansible_host'] }}
  FDPort = 9102
  Catalog = MyCatalog
  Password = "{{ hostvars[hostname]['backup_client_director_password'] }}"
  File Retention = 60 days
  Job Retention = 6 months
  AutoPrune = yes
}

{% endfor %}
#-------------------------------------------------------------------------------
# Storage
#-------------------------------------------------------------------------------

Storage {
  Name = File
  # Clients on the office (internal) network will resolve Address directly to
  # the backup storage host on the office network. External clients will resolve
  # it to the IP address provided by our ISP. Note the we must use the FQDN
  # since the hosting service for our external VMs overwrites any edits we make
  # to their /etc/resolv.conf file meaning that we can't specify our home domain
  # for searches there.
  Address = bacula-sd.{{ home_domain }}
  SDPort = 9103
  Password = "{{ backup_storage_director_password }}"
  Device = FileStorage
  Media Type = File
}

{% if backup_linked_to_dropbox %}
Storage {
   Name = FileCopy
{% if backup_storage_host is defined %}
   Address = "{{ backup_storage_host }}.{{ home_domain }}"
{% else %}
  Address = localhost
{% endif %}
   SDPort = 9103
   Password = "{{ backup_storage_director_password }}"
   Device = FileStorageCopy
   Media Type = File
}
{% endif %}

#-------------------------------------------------------------------------------
# Catalog
#-------------------------------------------------------------------------------

# Generic catalog service
Catalog {
  Name = MyCatalog
  dbname = "bacula";
{% if backup_database_host is defined
   and backup_database_host != inventory_hostname %}
  DB Address = "{{ backup_database_host }}";
{% else %}
  DB Socket = /var/run/mysqld/mysqld.sock;
{% endif %}
  dbuser = "{{ backup_database_user | default('bacula') }}";
  dbpassword = "{{ backup_database_password | default('bacula') }}"
}

#-------------------------------------------------------------------------------
# Messages
#-------------------------------------------------------------------------------

# Send most everything to the console and job termination errors and operator
# commands via email to the admin user.
Messages {
  Name = Standard
  mailcommand = "/usr/sbin/bsmtp -h localhost -f bacula@
    {{- home_domain }} -s \"Bacula: %t %e of %c %l\" %r"
  operatorcommand = "/usr/sbin/bsmtp -h localhost -f -f bacula@
    {{- home_domain }} -s \"Bacula: Intervention needed for %j\" %r"
  mail on error = {{ admin_user_email }} = all, !skipped
  operator = {{ admin_user_email }} = mount
  console = all, !skipped, !saved
  # NOTE: Log management under Debian is handled by systemd
  append = "/var/log/bacula/bacula.log" = all, !skipped
  catalog = all
}

# Message delivery for daemon messages (no job).
Messages {
  Name = Daemon
  mailcommand = "/usr/sbin/bsmtp -h localhost -f bacula@
    {{- home_domain }} -s \"Bacula daemon message\" %r"
  mail = {{ admin_user_email }} = all, !skipped
  console = all, !skipped, !saved
  # NOTE: Log management under Debian is handled by systemd
  append = "/var/log/bacula/bacula.log" = all, !skipped
}

#-------------------------------------------------------------------------------
# Pool
#-------------------------------------------------------------------------------

Pool {
  # Pool for daily catalog backup files
  # Storage set in JobDefs/Job and NOT here.
  Name = Catalog
  Pool Type = Backup
  Label Format = Catalog
  Maximum Volume Jobs = 1
  AutoPrune = yes
  Recycle = yes
  VolumeRetention = 3d
{% if backup_linked_to_dropbox %}
  Next Pool = CatalogCopy
{% endif %}
}

Pool {
  # Pool for daily backup files for on-site (office network) clients.
  # Storage set in JobDefs/Job and NOT here.
  Name = DailyOnSite
  Pool Type = Backup
  Label Format = DailyOnSite
  Maximum Volume Bytes = 5G
  Maximum Volume Jobs = 1
  AutoPrune = yes
  Recycle = yes
  Volume Retention = 10d
{% if backup_linked_to_dropbox %}
  Next Pool = DailyCopy
{% endif %}
}

Pool {
  # Pool for weekly backup files for on-site (office network) clients.
  # Storage set in JobDefs/Job and NOT here.
  Name = WeeklyOnSite
  Pool Type = Backup
  Label Format = WeeklyOnSite
  Maximum Volume Bytes = 5G
  Maximum Volume Jobs = 1
  AutoPrune = yes
  Recycle = yes
  VolumeRetention = 30d
{% if backup_linked_to_dropbox %}
  Next Pool = WeeklyCopy
{% endif %}
}

Pool {
  # Pool for monthly backup files for on-site (office network) clients.
  # Storage set in JobDefs/Job and NOT here.
  Pool Type = Backup
  Name = MonthlyOnSite
  Label Format = MonthlyOnSite
  Maximum Volume Bytes = 5G
  Maximum Volume Jobs = 1
  AutoPrune = yes
  Recycle = yes
  # We make a monthly backup on the 1st Saturday of every month.
  # We want to retain the last three monthly backups.
  #
  # Consider this scenario:
  # 1. Monthly backup runs on Saturday 2nd February;
  # 2. Monthly backup runs on Saturday 2nd March;
  # 3. Monthly backup runs on Saturday 6th April;
  # 4. Monthly backup runs on Saturday 4th May.
  #
  # The run on the 4th May should reuse the volumes written on 2nd February,
  # which was 31 weeks or 91 days previous.
  # Volume retention period is set to 90 days.
  VolumeRetention = 90d
{% if backup_linked_to_dropbox %}
  Next Pool = WeeklyCopy
{% endif %}
}

Pool {
  # Pool for daily backup files for off-site (Internet) clients.
  # Storage set in JobDefs/Job and NOT here.
  Name = DailyOffSite
  Pool Type = Backup
  Label Format = DailyOffSite
  Maximum Volume Bytes = 5G
  Maximum Volume Jobs = 1
  AutoPrune = yes
  Recycle = yes
  Volume Retention = 10d
}

Pool {
  # Pool for weekly backup files for off-site (Internet) clients.
  # Storage set in JobDefs/Job and NOT here.
  Name = WeeklyOffSite
  Pool Type = Backup
  Label Format = WeeklyOffSite
  Maximum Volume Bytes = 5G
  Maximum Volume Jobs = 1
  AutoPrune = yes
  Recycle = yes
  VolumeRetention = 30d
}

Pool {
  # Pool for monthly backup files for off-site (Internet) clients.
  # Storage set in JobDefs/Job and NOT here.
  Pool Type = Backup
  Name = MonthlyOffSite
  Label Format = MonthlyOffSite
  Maximum Volume Bytes = 5G
  Maximum Volume Jobs = 1
  AutoPrune = yes
  Recycle = yes
  # We make a monthly backup on the 1st Saturday of every month.
  # We want to retain the last three monthly backups.
  #
  # Consider this scenario:
  # 1. Monthly backup runs on Saturday 2nd February;
  # 2. Monthly backup runs on Saturday 2nd March;
  # 3. Monthly backup runs on Saturday 6th April;
  # 4. Monthly backup runs on Saturday 4th May.
  #
  # The run on the 4th May should reuse the volumes written on 2nd February,
  # which was 31 weeks or 91 days previous.
  # Volume retention period is set to 90 days.
  VolumeRetention = 90d
}

{% if backup_linked_to_dropbox %}
Pool {
  Name = CatalogCopy
  Pool Type = Copy
  Label Format = CatalogCopy
  Maximum Volume Bytes = 5G
  Maximum Volume Jobs = 1
  AutoPrune = yes
  Recycle = yes
  VolumeRetention = 3d
  Storage = FileCopy
}

Pool {
  # Pool for off-site copies of daily backups of on-site servers
  Name = DailyCopy
  Pool Type = Copy
  Label Format = DailyCopy
  Maximum Volume Bytes = 5G
  Maximum Volume Jobs = 1
  AutoPrune = yes
  Recycle = yes
  Volume Retention = 10d
  Storage = FileCopy
}

Pool {
  # Pool for off-site copies of weekly backups of on-site servers
  Name = WeeklyCopy
  Pool Type = Copy
  Label Format = WeeklyCopy
  Maximum Volume Bytes = 5G
  Maximum Volume Jobs = 1
  AutoPrune = yes
  Recycle = yes
  VolumeRetention = 6d
  Storage = FileCopy
}
{% endif %}

#-------------------------------------------------------------------------------
# Console
#-------------------------------------------------------------------------------

#
# Restricted console used by tray-monitor to get the status of the director
#
Console {
  Name = {{ backup_monitor_name }}
  Password = "{{ backup_director_monitor_password }}"
  JobACL = {% for hostname in hostnames %}{{ hostname }}, {% endfor %}
BackupCatalog, DailyCatalogCopy, DailyCatalogCopy
  ClientACL = {% for hostname in hostnames %}{% if loop.index != 1 %}
, {% endif %}{{ hostname }}{% endfor %}

{% if backup_linked_to_dropbox %}
  StorageACL = File, FileCopy
{% else %}
  StorageACL = File
{% endif %}
{% if  backup_director_schedules_active %}
  ScheduleACL = Catalog, DailyCatalogCopy, DailyOffSite, DailyOnSite, DailyCopy
{% endif %}
  PoolACL = Catalog, DailyOnSite, WeeklyOnSite, MonthlyOnSite, DailyOffSite, WeeklyOffsite, MonthlyOffite, CatalogCopy, DailyCopy, WeeklyCopy
  FileSetACL = {% for hostname in hostnames %}{{ hostname }}, {% endfor %}
Catalog, "Full Set"
  CatalogACL = MyCatalog
  CommandACL = status, .status
}
