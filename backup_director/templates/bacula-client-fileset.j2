FileSet {

  # Client specific fileset for {{ hostname }}
  Name = {{ hostname }}

  # Catch-all files to include. These will be progressively replaced by role and
  # client files to include from the client specific filesets. According to the
  # Bacula documenation, if a file or directory is duplicated then that will
  # lead to a repeat backup; for example '/' and 'usr'. The documentation
  # doesn't say whether the same is true of an exact duplication. However, this
  # makes it important that our FileSet definitions are as targeted as possible.

  Include {

    Options {
      Compression=GZIP
      signature = MD5
    }

    # Home folders excluding mail directories
    File = /home
    ExcludeDirContaining = maildirfolder

  }

  Include {

    Options {
      Compression=GZIP
      Signature = MD5
    }

    # APT sources
    File = /etc/apt/sources.list
    File = /etc/apt/sources.list.d

    # Exim MTA
    File = /etc/exim4

    # Filesystem table
    File = /etc/fstab

    # Cron jobs
    File = /etc/crontab
    File = /etc/cron.daily
    File = /etc/cron.hourly
    File = /etc/cron.monthly
    File = /etc/cron.weekly

    # Network
    File = /etc/hosts
    File = /etc/network/interfaces
    File = /etc/resolv.conf

    # Var localisations
    File = /var/local

  }

  Include {

    # User localisations
    File = /usr/local

    Options {
      Compression=GZIP
      Signature = MD5
    }

    Options {
      Exclude = yes
      WildDir = "/usr/local/share/nginx"
    }

  }

{#-
Use an array variable "roles" to capture all the roles that are applicable to
the current host.
#}

{%- set roles = [] %}

{#-
Iterate the groups that the current host is in, looking for roles associated
with each group. Use the Ansible special variable "groups" containing "A
dictionary/map with all the groups in inventory and each group has the list of
hosts that belong to it" (reference the Ansible documentation).
#}

{%- for group in groups %}

  {%- for host in groups[group] %}

    {%- if host == hostname %}

{#-
The variable "playbook" containing the deploy-host-roles.yml playbook is passed
to this template from the backup_director role's main task list. This gives us
the mapping between groups or individual hosts and the roles assigned to them.
#}

      {%- for play in playbook %}

        {%- if play['hosts'] == group %}

          {%- for role in play['roles'] %}

{#-
The role is referenced as a string containing the role name.
#}

            {%- if role is string %}

{#-
Hack to append the found role to the roles array without displaying anything.
#}

              {{- roles.append(role) or "" }}

              {%- else %}

{#-
The role is referenced as a dictionary variable with the role attribute
containing the role name.
#}

                {{- roles.append(role['role']) or "" }}

            {%- endif %}

          {%- endfor %}

        {%- endif %}

      {%- endfor %}

    {%- endif %}

  {%- endfor %}

{%- endfor %}

{#-
Now go through the playbook agin, this time looking for roles that are assigned
directly to the current host rather than via that host's membership of a group.
#}

{%- for play in playbook %}

  {%- if play['hosts'] == hostname %}

    {%- if 'roles' in play %}

      {%- for role in play['roles'] %}

        {%- if role is string %}

          {{- roles.append(role) or "" }}

        {%- else %}

          {{- roles.append(role['role']) or "" }}

        {%- endif %}

      {%- endfor %}

    {%- endif %}

  {%- endif %}

{%- endfor %}


# Include files for each role deployed to this host for which a file is provided
{%- for role in roles | unique | sort %}
  {%- for include_file in include_files %}
    {%-
      if (
        include_file.path | regex_search(role + '/files/bacula-fileset\.conf$')
      )
    %}

@/etc/bacula/inc/role-fs/{{ role }}.conf
    {%- endif %}
  {%- endfor %}
{%- endfor %}


}
