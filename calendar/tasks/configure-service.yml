# ------------------------------------------------------------------------------
# calendar/tasks/configure-service.yml
# ------------------------------------------------------------------------------

---

- name: Get the codename of the Debian release on this host
  ansible.builtin.command: lsb_release --codename --short
  register: lsb_release
  changed_when: false

- block:

    # By default the Radicale service is only exposed on the local interface so
    # we reconfigure it to expose the service on external interfaces, otherwise
    # we couldn't make client connections to it.
    - name: Expose calendar service on the network
      ansible.builtin.lineinfile:
        path: /etc/radicale/config
        # Original line is:
        # '#hosts = 127.0.0.1:5232' (Radicale 2 on buster); or
        # '#hosts = localhost:5232' (Radicale 3 on bullseye or bookworm)
        #
        # Regex matches both original and replacement to ensure idempotence
        regexp: '^#?hosts = (?:localhost|(?:\d{1,3}\.){3}\d{1,3}):5232$'
        line: hosts = 0.0.0.0:5232
      notify: Radicale configuration changed

    - name: Enable radicale version 2 as a service on buster
      ansible.builtin.lineinfile:
        path: /etc/default/radicale
        line: ENABLE_RADICALE=yes
        regex: '^#?ENABLE_RADICALE=yes'
      notify: Radicale configuration changed
      when: lsb_release.stdout == 'buster'

    - name: Enable radicale version 3 as a service on bullseye or bookworm
      ansible.builtin.service:
        name: radicale
        enabled: yes
      notify: Radicale configuration changed
      when: lsb_release.stdout == 'bullseye' or lsb_release.stdout == 'bookworm'

    # TODO: Configure user authentication for access
    # We currently use Radicale only on the internal network for shared
    # calendars, so we disable user authentication. This means that any access
    # credentials will work. We might want to implement user authentication for
    # our calendar service at some point.
    - name: Disable user authentication
      ansible.builtin.lineinfile:
        path: /etc/radicale/config
        # TODO: Improve approach to generalise matching reliability
        # The hosts setting appears to be unique but the type setting occurs in
        # multiple config sections. Our approach only works because none of the
        # occurrences has none as the default setting though it is a valid
        # option for more than one of them. See if there is a way to get these
        # steps that currently use lineinfile so that we can target a specific
        # config section?
        #
        # Original line is:
        # 'type = remote_user' (Radicale 2 on buster and Radicale 3 on bullseye)
        #
        # Regex matches both original and replacement to ensure idempotence
        regexp: '^type = (?:remote_user|none)$'
        line: type = none
      notify: Radicale configuration changed

  become: yes
