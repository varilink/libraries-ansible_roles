---

- name: Find the currently installed themes for this WordPress site
  ansible.builtin.command: >-
    wp --path={{ wordpress_site_path }}
    theme list --format=json
  changed_when: false
  register: wp_theme_list

- name: Set installed_themes and project_themes variables
  set_fact:
    # installed_themes = array of dictionary objects containing the details of
    # each theme that was installed before this task list is run.
    installed_themes: "{{ wp_theme_list.stdout | from_json }}"
    # project_themes = array of dictionary objects containing those entries in
    # wordpress_site_themes that define a path. This marks them out as deployed
    # from the project's WordPress repository rather than the WordPress theme
    # directory.
    project_themes: "\
      {{ wordpress_site_themes | selectattr('path', 'defined') }}"

- name: Set active_theme variable when there is only one theme configured
  set_fact:
    # active_theme = the single active theme (there can be only one) that the
    # configuration for this WordPress site identifies. If there is only one
    # theme configured then we don't need to examine its configured status.
    active_theme: "{{ wordpress_site_themes | first }}"
  when: wordpress_site_themes | length == 1

- name: Set active_theme variable when more than on theme is configured
  set_fact:
    # active_theme = see previous task. If there is more than one theme
    # configured then we need to pick out the one (there will be only one) with
    # a status of 'active' set.
    active_theme: >-
      {{
        wordpress_site_themes | selectattr('status', 'equalto', 'active')
          | first
      }}
  when: wordpress_site_themes | length > 1

- name: >-
    Set some convenience variables containing just installed, required and
    project theme names
  set_fact:
    installed_theme_names: |-
      {{ installed_themes | map(attribute='name') }}
    required_theme_names: |-
      {{ wordpress_site_themes | map(attribute='name') }}
    project_theme_names: "{{ project_themes | map(attribute='name') }}"

- name: Delete (forcing if active) unneeded WordPress themes
  ansible.builtin.command: >-
    wp --path={{ wordpress_site_path }}
    theme delete {{ item }} --force
  loop: |-
    {{ installed_theme_names | difference(required_theme_names) }}

- name: Install required WordPress themes not yet installed
  ansible.builtin.command: >
    wp --path={{ wordpress_site_path }}
    theme install {{ required.name }}
    {% if required.version is defined %}
    --version={{ required.version }}
    {% endif %}
  vars:
    required: >-
      {{
        wordpress_site_themes | selectattr('name', 'equalto', item)
        | first
      }}
  loop: >-
    {{
      required_theme_names | difference(project_theme_names) |
      difference(installed_theme_names)
    }}

- name: >-
    Deploy files for themes defined within the WordPress project itself -
    "project" themes
  ansible.builtin.synchronize:
    src: "{{ item.path }}"
    dest: "{{ wordpress_site_path }}/wp-content/themes/"
    rsync_opts: "--chown=www-data:www-data"
  loop: "{{ project_themes }}"
  become_user: root

- name: Activate the theme that must be active if it wasn't already installed
  # If the theme that is required to be active wasn't installed before this
  # task list began then we will have just installed it but not yet activated
  # it, so do that now.
  ansible.builtin.command: >-
    wp --path={{ wordpress_site_path }}
    theme activate {{ active_theme.name }}
  when: active_theme.name not in installed_theme_names

- name: Activate the theme that must be active if it was installed but inactive
  # If the theme that is required to be active was installed before this task
  # list began then we will know its current status. If that isn't "active" then
  # activate it.
  ansible.builtin.command: >-
    wp --path={{ wordpress_site_path }}
    theme activate {{ active_theme.name }}
  when: >-
    active_theme.name in installed_theme_names and
    ( installed_themes | selectattr('name', 'equalto', active_theme.name)
    | first ).status != 'active'

- ansible.builtin.include_tasks: "./inc/update-theme.yml"
  vars:
    installed: >-
      {{
        installed_themes | selectattr('name', 'equalto', item)
        | first
      }}
    required: >-
      {{
        wordpress_site_themes | selectattr('name', 'equalto', item)
        | first
      }}
  loop: >-
    {{ required_theme_names | intersect(installed_theme_names) }}

- ansible.builtin.include_tasks: "inc/set-theme-mod.yml"
  # Theme mods will only be defined for the single theme that we define to be
  # active.
  vars:
    theme_mod:
      name: "{{ item.name }}"
      value: "{{ item.value }}"
  loop: "{{ active_theme.mods }}"
  when: active_theme.mods is defined
