# ------------------------------------------------------------------------------
# wordpress/tasks/create-site.yml
# ------------------------------------------------------------------------------

---

- block:

    - name: Create directory to hold site WordPress files
      # NOTE: This will create any missing directories in the path; for example
      # if wp_path=/var/www/dev.varilink.co.uk/html and /var/www exists but not
      # /var/www/dev.varilink.co.uk, then /var/www/dev.varilink.co.uk will be
      # created as well as /var/www/dev.varilink.co.uk/html.
      ansible.builtin.file:
        path: "{{ wp_path }}"
        state: directory

    - name: Set required ownership of directory to hold site WordPress files
      # NOTE: We repeat the previous task but this time with owner and group
      # specified. This is so that any parent directories in the wp_path that
      # were created in the previous step retain root as their owner but the
      # wp_path directory has www-data as both its owner and group.
      ansible.builtin.file:
        path: "{{ wp_path }}"
        state: directory
        owner: www-data
        group: www-data

    - name: "\
        Test if the log file used by the Varilink Log Writer plugin is present"
      ansible.builtin.stat:
        path: "{{ wp_path }}/../varilink.log"
      register: varilink_log_stat_result

    - name: Create the log file used by the Varilink Log Writer plugin
      # The touch operation is always reported as a change by Ansible so I don't
      # want to do the operation if the file is already present, hence the when
      # clause based on the outcome of a prior stat operation.
      ansible.builtin.file:
        path: "{{ wp_path }}/../varilink.log"
        state: touch
        owner: www-data
        group: www-data
      when: not varilink_log_stat_result.stat.exists

    - block:

        - name: Download WordPress files
          ansible.builtin.command:
            cmd: >-
              wp --path={{ wp_path }} core download --locale=en_GB
              {% if wp_version is defined %}
              --version={{ wp_version }}
              {%- endif %}
            creates: "{{ wp_path }}/index.php"

        - name: Create the WordPress config file
          ansible.builtin.command:
            cmd: >-
              wp --path={{ wp_path }} config create
              --dbhost=
              {%- if wp_database_host is not defined -%}
              localhost
              {%- else -%}
              {{ wp_database_host }}
              {%- endif %}
              --dbname={{ wp_server_name | regex_replace ('\.', '_') }}
              --dbuser={{ wp_server_name | regex_replace ('\.', '_') }}
              --dbpass='{{ wp_database_password }}'
              --extra-php
              --skip-check
            stdin: |
              # BEGIN EXTRA PHP
              # END EXTRA PHP
            creates: "{{ wp_path }}/wp-config.php"

        - name: Deny visibility of WordPress config file to others
          ansible.builtin.file:
            path: "{{ wp_path }}/wp-config.php"
            mode: u=rw,g=r,o=

        - name: Remove WordPress sample config file
          ansible.builtin.file:
            path: "{{ wp_path }}/wp-config-sample.php"
            state: absent

        - name: Check if WordPress is installed
          ansible.builtin.shell: wp --path={{ wp_path }} core is-installed
          register: wp_installed
          # This task never changes anything.
          changed_when: false
          # If WordPress is installed, rc=0, if it isn't rc=1.
          failed_when: wp_installed.rc !=0 and wp_installed.rc != 1

        - name: Install WordPress
          ansible.builtin.command: >-
            wp --path={{ wp_path }}
            core install
            --url=
            {%- if wp_uses_ssl is not defined or wp_uses_ssl %}https://
            {%- else %}http://
            {%- endif %}
            {{- wp_server_name }}
            --title="{{ domain_organisation }}"
            --admin_user={{ wp_admin_user | default(admin_user) }}
            --admin_password='{{ wp_admin_password }}'
            --admin_email={{ wp_admin_email | default(admin_user_email) }}
            --locale=en_GB
            --skip-email
          # The rc from the `wp core is-installed` command is 0 if it is
          # installed and 1 if it isn't, so the when check is the reverse of
          # what we might intuitively expect from reading it.
          when: wp_installed.rc

        - name: >-
            Disable automatic core updates unless explicitly instructed to keep
            them enabled
          ansible.builtin.lineinfile:
            path: "{{ wp_path }}/wp-config.php"
            line: define('WP_AUTO_UPDATE_CORE', false);
            insertafter: '^# BEGIN EXTRA PHP$'
          when: wp_auto_update_core is not defined or not wp_auto_update_core

        - name: Enable automatic core updates if we are instructed to
          ansible.builtin.lineinfile:
            path: "{{ wp_path }}/wp-config.php"
            line: define('WP_AUTO_UPDATE_CORE', false);
            state: absent
          when: wp_auto_update_core is defined and wp_auto_update_core

        - name: Add site specific lines to the wp-config file
          block:

            - name: Insert block markers for the "site specific" block
              ansible.builtin.lineinfile:
                path: "{{ wp_path }}/wp-config.php"
                line: "{{ item }}"
                insertbefore: "^# END EXTRA PHP"
              loop:
                - "# BEGIN ANSIBLE MANAGED SITE SPECIFIC BLOCK"
                - "# END ANSIBLE MANAGED SITE SPECIFIC BLOCK"

            - name: Add site specific configuration to the wp-config file
              ansible.builtin.blockinfile:
                path: "{{ wp_path }}/wp-config.php"
                marker: "# {mark} ANSIBLE MANAGED SITE SPECIFIC BLOCK"
                block: "{{ wp_config }}"

          when: wp_config is defined

        - name: >-
            Synchronize plugins defined in this repository to the wordpress
            site's host
          ansible.builtin.synchronize:
            src: "../{{ item.src }}"
            dest: "{{ wp_path }}/wp-content/plugins/{{ item.dest }}"
            delete: yes
            rsync_opts: "{{ rsync_common_opts + rsync_plugin_opts }}"
          vars:
            rsync_common_opts:
              - "--chown=www-data:www-data"
            rsync_plugin_opts: "{{ item.rsync_opts | default([]) }}"
          loop: "{{ wp_plugins }}"
          when: wp_plugins is defined

        - name: >-
            Synchronize theme defined in this repository to the wordpress
            site's host
          ansible.builtin.synchronize:
            src: "../{{ item.src }}"
            dest: "{{ wp_path }}/wp-content/themes/{{ item.dest }}"
            delete: yes
            rsync_opts: "{{ rsync_common_opts + rsync_theme_opts }}"
            rsync_path: |-
              {%- if item.rsync_path is defined %}
              {{ item.rsync_path }}
              {%- else %}
              sudo -u www-data rsync
              {%- endif %}
          vars:
            rsync_common_opts:
              - "--chown=www-data:www-data"
            rsync_theme_opts: "{{ item.rsync_opts | default([]) }}"
          loop: "{{ wp_themes }}"
          when: wp_themes is defined
#          register: theme_sync

#        - debug:
#            var: theme_sync

      become_user: www-data

  become: yes
