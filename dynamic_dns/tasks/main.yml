# ------------------------------------------------------------------------------
# dynamic_dns/tasks/main.yml
# ------------------------------------------------------------------------------

---

#-------------------------------------------------------------------------------
# Deploy to base dynamic DNS capability. Dynamic DNS services on a per domain
# basis can then be configured on this service using domain.yml tasks list in
# this role.
#-------------------------------------------------------------------------------

- block:

    # Import the dns_api role to provide the configuration for access the Linode
    # API service to manipulate DNS records. This is also required by the
    # mail_certificates role and so is implemented in a separate role to enable
    # that sharing. We use an import_role task rather than a meta dependency so
    # that the domain.yml tasks can be invoked without pulling the dns_api role
    # in again.
    - ansible.builtin.import_role:
        name: dns_api

    - name: Install APT packages used by the dynamic DNS role
      ansible.builtin.apt:
        name:
          - cron
          - libconfig-tiny-perl
          - libjson-perl
          - libperl5.32
          - libwww-perl
          - libyaml-perl
          # Ensure that an editor is present in case we want to `crontab -e` if
          # only to conveniently inspect the crontab.
          - nano
        install_recommends: no

    - name: Deploy the dynamic-dns script
      ansible.builtin.template:
        src: dynamic-dns.pl.j2
        dest: /usr/local/src/dynamic-dns.pl
        mode: 0644

    - name: \"
        Find the times past the hour of current schedule for dynamic-dns script"
      ansible.builtin.shell: >-
        crontab -l | grep 'perl /usr/local/src/dynamic-dns.pl' |
        tr -s ' ' | cut -d' ' -f1
      changed_when: false
      register: crontab_list

    - name: Set a variable holding the current schedule
      # The current schedule is an array of strings that are the times past the
      # hour that cron will run the dynamic-dns.pl script; for example
      # ["0", "15", "30", "45"]
      ansible.builtin.set_fact:
        current_schedule: "{{ crontab_list.stdout_lines }}"

    - name: Set a variable holding the desired schedule
      # The desired schedule is an array of strings that are the times past the
      # hour that we want cron to run the dynamic-dns.pl script; for example
      # ["0", "15", "30", "45"]
      ansible.builtin.set_fact:
        desired_schedule: >-
          {{
            (lookup(
              'sequence',
              '0' + '-' + ((60 - stride) | string) + '/' + (stride | string)
            )).split(',')
          }}
      vars:
        stride: "{{ dynamic_dns_crontab_stride }}"

    - name: >-
        Delete crontab entries for times in the current schedule that aren't in
        the desired schedule
      ansible.builtin.cron:
        name: "Dynamic DNS update at {{ item }} minutes past the hour"
        state: absent
      loop: "{{ current_schedule | difference(desired_schedule) }}"

    - name: >-
        Add crontab entries for times in the desired schedule that aren't in the
        current schedule
      ansible.builtin.cron:
        job: perl /usr/local/src/dynamic-dns.pl
        minute: "{{ item }}"
        name: "Dynamic DNS update at {{ item }} minutes past the hour"
      loop: "{{ desired_schedule | difference(current_schedule) }}"

    - name: Create a directory to hold dynamic DNS record configuration files
      ansible.builtin.file:
        path: "{{ dynamic_dns_records_dir }}"
        state: directory
        mode: u=rw,g=,o=

  become: yes
