=head1 Dynamic DNS Record Updater

=prod
This script uses the Linode API to update DNS records for domains whose DNS zone
is hosted by Linode. It runs on our office network, which is not allocated a
fixed IP address by our ISP. Therefore the external IP address for any services
that we run on our office network and expose externally will periodically
change. This script recognises when that has happened and updates the DNS
records corresponding to those services accordingly.
=cut

use strict;
use warnings;

use Config::Tiny;
use Data::Dumper;
use HTTP::Headers;
use JSON qw(encode_json decode_json);
use LWP::UserAgent;
use Sys::Syslog qw(:standard :macros);
use YAML qw(LoadFile);

# --------
# 1. Setup
# --------

# Script expects no arguments. Error and exit if any are provided.
if ( @ARGV > 0 ) {
  print STDERR "This script should be run with no arguments\n";
  exit;
}

opendir ( my $dh , '{{ dynamic_dns_records_dir }}' )
  || die "Can't opendir {{ dynamic_dns_records_dir }}: $!";
my @record_files = grep ( /\.yml$/ , readdir ( $dh ) );
closedir $dh;

# Open the syslog for informational reporting.
openlog(
  'dynamic-dns', # identify for log messages
  'ndelay,pid',  # open immediately (ndelay) and include PID with each message
  LOG_LOCAL0
);

# Report to the syslog that we've started a scheduled run of this script.
syslog( LOG_INFO, 'Started check for Dynamic DNS updates' );

# Read the Linode API personal access token. This should be scoped for domain
# updates only. The format of the file that the token is stored in is as
# required by the DNS Linode plugin to certbot, since the token is shared with
# the process that obtains SSL certificates for imap and smtp connections to our
# customer and home domains' mail services.
my $config = Config::Tiny->read( '/usr/local/etc/dns-linode-credentials.ini' );

# Normally the dynamic-dns.pl script uses Linode's [remote_addr] placeholder for
# the current, dynamically assigned IP address. However, there's been at least
# one instance when this wasn't working due to a bug. So, this parameter can be
# overridden to use the ipify API to get our IP address instead - see also the
# defaults/main.yml file for this role.
my $use_ipify = {% if dynamic_dns_use_ipify %}1{% else %}0{% endif %};

my $my_ip = 0; # false unless populated with an IP address
if ( $use_ipify ) {
  my $user_agent = new LWP::UserAgent( ssl_opts => { verify_hostname => 1 } );
  my $response = $user_agent->get( 'https://api.ipify.org?format=json' );
  if ( $response->is_success ) {
    $my_ip = decode_json( $response->content )->{ ip };
  } else {
    print STDERR "Error when using ipify to get my IP address\n";
    die;
  }
}

# ---------
# 2. Action
# ---------

if ( Config::Tiny->errstr ) {

  print STDERR
    'Is dynamic-dns.pl being run without Linode integration configured?',
    "\n";

  foreach my $record_file ( @record_files ) {

    syslog(
      LOG_ERR,
      "Unable to process record file $record_file due to no Linode credentials"
    );

  } # foreach my record_file ( @record_files )

} else {

  my $dns_linode_key = $config->{_}->{dns_linode_key};

  # Create a user agent and set defaults for every request that will use it.
  my $headers = new HTTP::Headers;
  $headers->header( 'Authorization' => "Bearer $dns_linode_key" );
  my $user_agent = new LWP::UserAgent( ssl_opts => { verify_hostname => 1 } );
  $user_agent->default_headers( $headers );

  # Variable to receive responses to API requests.
  my $response;

  foreach my $record_file ( @record_files ) {

    syslog( LOG_INFO, "Processing record file $record_file" );

    my $ids = LoadFile( "{{ dynamic_dns_records_dir }}/$record_file" );

    # Invoke the Domain View API for the domain id specified in the record file.
    $response = $user_agent->get( '{{ dns_linode_base_url }}/' .
      $ids->{ domain }
    );

    if ( ! $response->is_success ) {

      # Report error executing the Domain View API for this record file. NOTE:
      # Any output to STDERR from a script invoked via cron will be emailed to
      # the admin user's email address. We use this mechanism to report errors
      # rather than sending them to the log so that they're brought to the
      # immediate attention of the admin user.
      print STDERR $response->status_line,
        ' viewing domain from record file ', $record_file,
        "\n";
      next;

    }

    # Invoke the Domain Record View API for the domain id and record id
    # specified in the record file.
    $response = $user_agent->get( '{{ dns_linode_base_url }}/' .
      $ids->{ domain } . '/records/' . $ids->{ record }
    );

    if ( $response->is_success ) {

      # Capture the current target IP address so that we can determine if it has
      # been changed or not.
      my $original_target = decode_json( $response->content )->{ target };

      # Set the content for the Domain Record Update. The special variable
      # remote_addr should correspond to the current IP address provided to our
      # office network by our ISP as Linode sees it on the incoming API request.
      # However this can be overridden to use the ipify API to get the IP
      # address instead.
      my $content;
      if ( $my_ip ) {
        $content = encode_json( { target => $my_ip } );
      } else {
        $content = encode_json( { target => '[remote_addr]' } );
      }

      # Invoke the Domain Record Update API for the current domain record.
      $response = $user_agent->put( '{{ dns_linode_base_url }}/' .
        $ids->{ domain } . '/records/' . $ids->{ record },
        'Content-Type' => 'application/json',
        'Content' => $content
      );

      if ( $response->is_success ) {

        if (
          decode_json( $response->content )->{ target } ne $original_target
        ) {

          # The domain record target was changed by the Domain Record Update API
          # call. Report this at LOG_NOTICE level as a "normal, but significant,
          # condition".
          syslog( LOG_NOTICE,
            'The target was changed from %s to %s for record file %s',
            (
              $original_target,
              decode_json( $response->content )->{ target },
              $record_file
            )
          );

        }

      } else {

        print STDERR $response->status_line,
          ' updating record from record file ', $record_file,
          "\n";

      }

    } else {

        print STDERR $response->status_line,
          ' viewing record from record file ', $record_file,
          "\n";

    }

  } # foreach my record_file ( @record_files )

}

# ----------
# 3. Cleanup
# ----------

syslog( LOG_INFO, 'Finished check for Dynamic DNS updates' );
closelog();

1 ;

__END__
