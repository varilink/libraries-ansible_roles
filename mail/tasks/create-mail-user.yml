# ------------------------------------------------------------------------------
# mail/tasks/create-mail-user.yml
# ------------------------------------------------------------------------------

# These tasks create an email account 

---

# Import common handlers from mta role for "Aliases changed" listener
- ansible.builtin.import_role:
    name: mta
    handlers_from: common
    tasks_from: none

- block:

    - block:

        - block:

            # We are adding a user for our home domain so we add the user as an
            # operating system user rather than a Dovecot virtual user. This
            # will also update the user's password if it has changed.

            - name: >-
                Get the content of the /etc/shadow file that contains user
                passwords
              ansible.builtin.slurp:
                src: /etc/shadow
              register: shadow_file

            - name: >-
                Set variable to the user record in the shadow file if it is
                found
              ansible.builtin.set_fact:
                shadow_file_user_rec: >-
                  {{ shadow_file.content | b64decode | regex_search(
                  '^' + user.fname + '.*$', multiline=True) }}

            - block:

                - name: Set variable containing in the existing md5 hash
                  ansible.builtin.set_fact:
                    existing_md5_hash: >-
                      {{ shadow_file_user_rec | regex_search('^' + user.fname
                      + ':(\$1\$.{8}\$.{22}):', '\1') | first }}

                - name: >-
                    Generate md5 hash of the configured password for the user
                    using the same salt in the existing md5 hash
                  ansible.builtin.command: |-
                    mkpasswd --method=md5 '{{ user.password }}' '{{ salt }}'
                  changed_when: false
                  register: mkpasswd_result
                  vars:
                    salt: >-
                      {{ existing_md5_hash | regex_search('^\$1\$(.{8})',
                      '\1') | first }}

                - name: >-
                    Set variable indicating if the user password has changed or
                    not
                  ansible.builtin.set_fact:
                    password_has_changed: |-
                      {% if mkpasswd_result.stdout == existing_md5_hash %}
                      false
                      {%- else %}
                      true
                      {%- endif %}

              when: shadow_file_user_rec
              # The user was found in the /etc/shadow file

            - block:

                - name: >-
                    Generate hash of the configured password for the user
                    using a randomly generated salt
                  ansible.builtin.command: |-
                    mkpasswd --method=md5 '{{ user.password }}'
                  changed_when: false
                  register: mkpasswd_result
              
                - name: >-
                    Create operating system user account or change the password
                    of an existing user
                  ansible.builtin.user:
                    name: "{{ user.fname }}"
                    password: "{{ mkpasswd_result.stdout }}"

              when: not shadow_file_user_rec or password_has_changed
              # The user was not found in the /etc/shadow file or their password
              # has been changed.

          when: user.fname != admin_user
          

        - name: Add alias for user to the /etc/aliases file
          ansible.builtin.lineinfile:
            path: /etc/aliases
            line: "{{ user.fname }}.{{ user.lname }}: {{ user.fname }}"
          notify: Aliases changed

      when: domain_name == home_domain

    - block:

        # We are adding a user for a customer domain so we add the user as a
        # Dovecot virtual user rather than an operating system user. Note that
        # the generated password hash differs each time it is generated for the
        # same password, indicating perhaps that a random salt is used. If you
        # know that then you will understand some of the tasks below better.

        - name: >-
            Set a variable to the regex pattern to find the user in the users
            file
          ansible.builtin.set_fact:
            user_regex: "^{{ user.email + ':' | regex_escape() }}"

        - name: Check if the user is already present in the users files
          ansible.builtin.command: grep '{{ user_regex }}' /etc/dovecot/users
          register: grep_user
          failed_when: grep_user.rc != 0 and grep_user.rc != 1
          changed_when: false

        - block:

            # The user is already present in the /etc/dovecot/users file so we
            # don't have to add it as new but we may change the password hash
            # in the file but ONLY if the current hash doesn't match the current
            # password.

            - name: >-
                Get the current password hash when the user is found in the file
              ansible.builtin.shell: "\
                echo -n {{ grep_user.stdout }} | cut -d ':' -f 2"
              register: current_hash
              changed_when: false

            - name: >-
                Carry out a reverse password verification check against the current
                hash
              ansible.builtin.command: "\
                doveadm pw -p '{{ user.password }}' -t '{{ current_hash.stdout }}'"
              register: hash_verify
              # The `doveadm pw` command's return code is 0 if the hash is verified and
              # 75 if there is a password mismatch.
              failed_when: hash_verify.rc != 0 and hash_verify.rc != 75
              changed_when: false

          when: grep_user.rc == 0

        - block:

            # We need to either add the user to the users file or update the
            # hash for a user that is already in the file, indicating that we
            # must have changed the password for that user.

            - name: Generate a Dovecot password hash for the user
              ansible.builtin.command: "\
                doveadm pw -s CRYPT -p {{ user.password }} -u {{ user.email }}"
              register: new_hash
              changed_when: false

            - name: >-
                Add user to users file or update the hash for a user that is
                already in the file
              ansible.builtin.lineinfile:
                path: /etc/dovecot/users
                line: "\
                  {{ user.email }}:{{ new_hash.stdout }}::::\
                  /home/vmail/{{ user.email }}::"
                regexp: "{{ user_regex }}"

          when: grep_user.rc == 1 or hash_verify.rc == 75

        - name: Create folder for the user's mailbox
          ansible.builtin.file:
            path: /home/vmail/{{ user.email }}
            state: directory
            owner: vmail
            group: vmail

      when: domain_name != home_domain

  become: yes
