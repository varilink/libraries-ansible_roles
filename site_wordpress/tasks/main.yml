- block:

    - name: Create directory to hold site WordPress files
      ansible.builtin.file:
        path: "{{ wordpress_site_path }}"
        state: directory

    - name: Download WordPress files
      ansible.builtin.command:
        cmd: >-
          wp --allow-root --path={{ wordpress_site_path }}
          core download --locale=en_GB
          {% if wordpress_site_version is defined %}
          --version={{ wordpress_site_version }}
          {% endif %}
        creates: "{{ wordpress_site_path }}/index.php"

    - name: Create the WordPress config file for local database
      ansible.builtin.command:
        cmd: >-
          wp --allow-root --path={{ wordpress_site_path }}
          config create
          --dbhost=localhost
          --dbname={{ wordpress_site_server_name | regex_replace ('\.', '_') }}
          --dbuser={{ wordpress_site_server_name | regex_replace ('\.', '_') }}
          --dbpass={{ wordpress_site_database_password }}
          --skip-check
        creates: "{{ wordpress_site_path }}/wp-config.php"
      when: wordpress_site_database_host is not defined

    - name: Create the WordPress config file for remote database
      ansible.builtin.command:
        cmd: >-
          wp --allow-root --path={{ wordpress_site_path }}
          config create
          --dbhost={{ wordpress_site_database_host }}
          --dbname={{ wordpress_site_server_name | regex_replace ('\.', '_') }}
          --dbuser={{ wordpress_site_server_name | regex_replace ('\.', '_') }}
          --dbpass={{ wordpress_site_database_password }}
          --skip-check
        creates: "{{ wordpress_site_path }}/wp-config.php"
      when: wordpress_site_database_host is defined

    - name: Deny visibility of WordPress config file to others
      ansible.builtin.file:
        path: "{{ wordpress_site_path }}/wp-config.php"
        mode: u=rw,g=r,o=

    - name: Remove WordPress sample config file
      ansible.builtin.file:
        path: "{{ wordpress_site_path }}/wp-config-sample.php"
        state: absent

    - name: Set correct ownership of all WordPress files
      ansible.builtin.file:
        path: "{{ wordpress_site_path }}"
        owner: www-data
        group: www-data
        recurse: yes
        state: directory

    - name: Install WordPress
      # NOTE: Reports changed even if WordPress already installed.
      # TODO: Try to make it skip if WordPress already installed.
      ansible.builtin.command: >-
        wp --allow-root --path={{ wordpress_site_path }}
        core install
        --url={{ wordpress_site_server_name }}
        --title="{{ domain_organisation }}"
        --admin_user={{ wordpress_admin_user }}
        --admin_password={{ wordpress_admin_password }}
        --admin_email={{ wordpress_admin_email }}

    - name: Activate the wordpress-importer plugin
      # NOTE: Reports changed even if plugin already activated.
      # TODO: Try to make it skip if plugin already activated.
      ansible.builtin.command: >-
        wp --allow-root --path={{ wordpress_site_path }}
        plugin install wordpress-importer --activate

    - block:

        - name: Find the currently installed plugins
          ansible.builtin.command:
            wp --allow-root --path={{ wordpress_site_path }}
            plugin list --format=json
          changed_when: false
          register: installed_plugins

        - name: Uninstall (and deactivate if necessary) plugins not required
          ansible.builtin.command: >-
            wp --allow-root --path={{ wordpress_site_path }}
            plugin uninstall {{ plugin }} --deactivate
          # This loop returns the names of all plugins that are currently
          # installed that are NOT in the list of plugins required, as indicated
          # by the wordpress_site_plugins variable.
          loop: >-
            {{
              ((installed_plugins.stdout | from_json) | map(attribute='name'))
              | difference(wordpress_site_plugins.keys())
            }}
          loop_control:
            loop_var: plugin

        - name: Install missing plugins that are required
          ansible.builtin.command: >-
            wp --allow-root --path={{ wordpress_site_path }}
            plugin install {{ plugin }}
            {% if wordpress_site_plugins[plugin].version is defined %}
            --version={{ wordpress_site_plugins[plugin].version }}
            {% endif %}
            --activate
          # This loop returns the names of all plugins that are indicated as
          # required by the wordpress_site_plugins variable but are not yet
          # installed.
          loop: >-
            {{
              wordpress_site_plugins.keys() | difference(
                (installed_plugins.stdout | from_json) | map(attribute='name')
              )
            }}
          loop_control:
            loop_var: plugin

        - name: Update any plugins where update is indicated
          ansible.builtin.command: >-
            wp --allow-root --path={{ wordpress_site_path }}
            plugin update {{ plugin }}
            {% if wordpress_site_plugins[plugin].version is defined %}
            --version={{ wordpress_site_plugins[plugin].version }}
            {% endif %}
          loop: "{{ wordpress_site_plugins.keys() }}"
          loop_control:
            loop_var: plugin

        - name: Activate any plugins that are inactive
          ansible.builtin.command: >-
            wp --allow-root --path={{ wordpress_site_path }}
            plugin activate --all

      when: wordpress_site_plugins is defined

  become: yes
