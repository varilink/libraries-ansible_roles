- block:

  - name: Add operating system users if domain is the home domain
    ansible.builtin.import_role:
      name: home_domain_users
    when: domain.name == home_domain

  - name: Template Dovecot cert instructions
    ansible.builtin.template:
      src: dovecot.conf.j2
      dest: /etc/dovecot/domains/{{ domain.name }}.conf
    notify: dovecot configuration changed

  - name: Add smarthost entry for this domain
    ansible.builtin.lineinfile:
      path: /etc/exim4/domain.passwd.client
      line: "\
        {{ domain.name }}:\
        {{ domain.smarthost.username }}:\
        {{ domain.smarthost.userpass }}\
        "
      regexp: "^{{ domain.name }}:"

  - name: Add email aliases for users in the home domain
    ansible.builtin.lineinfile:
      path: /etc/aliases
      line: "{{ user.fname }}.{{ user.lname }}: {{ user.fname }}"
      regexp: '^{{ user.fname }}\.{{ user.lname }}:'
    loop: "{{ domain.users }}"
    loop_control:
      loop_var: user
    when: domain_name == home_domain

  - name: Add virtual email users if domain is NOT the home domain
    ansible.builtin.include_tasks: dovecot-user.yml
    loop: "{{ domain.users }}"
    loop_control:
      loop_var: user
    when: domain.name != home_domain

  - name: Check if the domain is already registered as a local domain
    shell: >-
      grep '^dc_other_hostnames=' /etc/exim4/update-exim4.conf.conf |
      grep {{ domain.name }}
    ignore_errors: true
    register: local_domain

  - name: Register the domain as a local domain if it isn't already
    ansible.builtin.lineinfile:
      path: /etc/exim4/update-exim4.conf.conf
      line: 'dc_other_hostnames=''\1;{{ domain.name }}'''
      regexp: '^dc_other_hostnames=''(.*)''$'
      backrefs: yes
    when: local_domain.rc == 1
    notify: exim configuration changed

  become: yes
