- block:

  - name: Fix Dropbox folder permissions
    ansible.builtin.file:
      path: ~bacula/Dropbox/
      mode: u=rwx,g=rx,o=

  - name: Determine the current status of the Dropbox daemon
    ansible.builtin.shell: gosu bacula bash -c '~/dropbox.py status'
    register: dropbox_daemon_status
    changed_when: false

  - name: Report the current status of the Dropbox daemon
    ansible.builtin.debug:
      var: dropbox_daemon_status.stdout_lines

  - name: Start Dropbox daemon and wait a little
    ansible.builtin.shell: |-
      gosu bacula bash -c '~/dropbox.py start'
      sleep 60
    when: dropbox_daemon_status.stdout == "Dropbox isn't running!"

  - name: Wait until new directories are no longer being created in ~/Dropbox
    ansible.builtin.shell: |-
      touch /tmp/now
      sleep 10
      find ~bacula/Dropbox -maxdepth 1 -type d -cnewer /tmp/now
    args:
      # Ansible warns about using the touch command in a shell rather than using
      # the file module with a state of touch. However what we do here is
      # legitimate because of the need to delay after the touch before the find
      # command is executed.
      warn: false
    changed_when: false
    register: find_result
    until: not find_result.stdout
    retries: 5
    # In this case the "delay" is built into the shell commands using the sleep
    # command and has to be in this use case.
    delay: 0

  - name: Find what we need to exclude
    ansible.builtin.find:
      paths: ~bacula/Dropbox/
      file_type: directory
      excludes:
        - "{{ backup_copy_folder }}"
    register: to_exclude

  - name: Exclude directories
    ansible.builtin.shell: >-
      gosu bacula bash -c
      '~/dropbox.py
      exclude add "{{ item.path }}"'
    loop: "{{ to_exclude['files'] }}"
    loop_control:
      label: "{{ item.path }}"
    register: exclusions

  - name: Confirm that the syncrhonisation exclusions have been added
    ansible.builtin.debug:
      msg: "{{ item.stdout }}"
    loop: "{{ exclusions['results'] }}"
    loop_control:
      label: "{{ item.item.path }}"
    when: item.skipped is not defined

  become: yes
