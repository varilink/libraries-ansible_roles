# ------------------------------------------------------------------------------
# reverse_proxy/tasks/create-site.yml
# ------------------------------------------------------------------------------

---

- name: "\
    Fail if WordPress site uses SSL but reverse proxy does not support SSL"
  # A reverse proxy can be configured to support SSL or not via the
  # host_enabled_for_ssl variable. A WordPress site can be configured to use SSL
  # or not via the wordpress_site_uses_ssl variable. If a WordPress site is
  # configured to use SSL via a reverse proxy that is not configured to support
  # SSL, then fail.
  ansible.builtin.fail:
    msg: >-
      Invalid request to install a WordPress site that uses SSL via a
      reverse proxy that does not support SSL
  # If wordpress_site_reverse_proxy_host is defined then this task has been
  # delegated to that host. If that is the case then because the reverse_proxy
  # role hasn't been imported on that host the role's default value for
  # host_enabled_for_ssl won't apply there so if host_enabled_for_ssl isn't
  # applied there via the inventory then it won't be defined. If
  # wordpress_site_reverse_proxy_host isn't enabled then the role's default
  # value will apply unless overridden in the inventory so it's much simpler.
  when: >-
    wordpress_site_uses_ssl and (
      (
        wordpress_reverse_proxy_host
          is defined and
        hostvars[wordpress_site_reverse_proxy_host].host_enabled_for_ssl
          is defined and not
        hostvars[wordpress_site_reverse_proxy_host].host_enabled_for_ssl
      )
    or
      (
        wordpress_reverse_proxy_host
          is defined and not
        host_enabled_for_ssl
      )
    )

- block:

    - name: Generate self-signed certificate if it isn't already installed
      ansible.builtin.command:
        cmd: >-
          openssl req -new -x509 -nodes -days 1095
          -out /etc/ssl/certs/{{
          wordpress_site_server_name | replace('.', '_')
          }}.pem
          -keyout /etc/ssl/private/{{
          wordpress_site_server_name | replace('.', '_')
          }}.pem
          -subj '/CN={{ wordpress_site_server_name }}'
          {% if subdomain == 'www' %} -addext "subjectAltName = DNS:{{
          domain_name
          }}"
          {%- endif %}
        creates: >-
          /etc/ssl/certs/{{
          wordpress_site_server_name | replace('.', '_')
          }}.pem
      # The WordPress site is SSL enabled using a self-signed certificate, so we
      # must generate that certificate if it doesn't exist already.
      when: wordpress_site_uses_ssl and not wordpress_site_uses_ca

    - name: >-
        Determine if a certification authority's certificate is installed
      ansible.builtin.shell: >-
        certbot certificates |
        grep 'Certificate Name: {{ wordpress_site_server_name }}'
      register: certbot_certificates
      failed_when: certbot_certificates.rc != 0 and certbot_certificates.rc != 1
      changed_when: false
      # The WordPress site is SSL enabled using a CA certificate, so see if we
      # already have one installed.
      when: wordpress_site_uses_ssl and wordpress_site_uses_ca

    - name: Template site Nginx configuration to sites-available
      ansible.builtin.template:
        src: nginx.conf.j2
        dest: "\
          /etc/nginx/sites-available/{{ wordpress_site_server_name }}.conf"
      notify:
        - Nginx configuration changed
      vars:
        certbot_certificate_installed: |-
          {%
            if certbot_certificates.rc is defined and
            certbot_certificates.rc == 0
          %}
          yes
          {%- else %}
          no
          {%- endif %}"
              
    - name: Enable site nginx configuration
      ansible.builtin.file:
        src: "\
          /etc/nginx/sites-available/{{ wordpress_site_server_name }}.conf"
        dest: "\
          /etc/nginx/sites-enabled/{{ wordpress_site_server_name }}.conf"
        state: link
      notify:
        - Nginx configuration changed

    # Flush handlers so that if the site is newly configured it becomes
    # available immediately for the Let's Encrypt HTTP-01 challenge if we're
    # going to go on and install a Let's Encrypt certificate. Note that we can't
    # place flush_handlers within a when conditional.
    - meta: flush_handlers

    - block:

        # A certification authority's certificate is not yet installed, so get
        # and install one.

        - name: Install certbot certificate
          ansible.builtin.command: |-
            certbot -n certonly
            --webroot -w {{ wordpress_site_path }}
            -d {{ wordpress_site_server_name }}
            {% if wordpress_site_subdomain == 'www' %}
            -d {{ domain_name }}
            {% endif %}

        - name: Template site nginx configuration to sites-available
          ansible.builtin.template:
            src: nginx.conf.j2
            dest: >-
              /etc/nginx/sites-available/{{
              wordpress_site_server_name
              }}.conf
          notify:
            - Nginx configuration changed
          vars:
            certbot_certificate_installed: yes

      become: yes
      when: >-
        wordpress_site_uses_ssl and wordpress_site_uses_ca and
        certbot_certificate.rc == 1

  become: yes
  delegate_to: "\
    {{ wordpress_site_reverse_proxy_host | default(inventory_hostname) }}"
