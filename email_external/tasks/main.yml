
---

# ------------------------------------------------------------------------------
# This is a long task list. To facilitate comprehending it, it's broken into the
# following sections:
#
# 1. Core - Some core aspects of this role
#
# 2. IMAP - Encryption and authentication of IMAP connections
#
# 3. SMTP inbound - Encryption and authentication of SMTP inbound connections


#
# 2. Virtual
# The configuration aspects required to cater for customer email domains as well
# as the home domain's emails. Those customer email domains are "virtual" in the
# sense of not being the host's domain.
#
# 3. Security
# Configure the security of the external email server to our specific needs,
# which are:
#  - No user credentials transmitted in plain text without an SSL/TLS wrapper.
#  - Support for the obselete LOGIN authentication mechanism.
#  - Exim to hand-off to Dovecot for authentication.
#
# 4. Sieve
# SPAM filtering of incoming emails using sieve.
#
# 5. Aliases
# Setup aliases for local user names.
# ------------------------------------------------------------------------------

# 1. Core
# -------

- name: Authorize public key of the host of the email_certificates role for SSH
  # The host of the email_certificates role must be able to sychronise its
  # repository of certificates to the host of this role. When Ansible generated
  # SSH keys in the email_certificates role, it copied the public key as
  # files/id_rsa.pub in this role. So, we need to add that key to authorised
  # keys on the current host.
  ansible.builtin.lineinfile:
    path: ~/.ssh/authorized_keys
    line: "{{ lookup('file', 'files/id_rsa.pub') }}"
    # Create ~/.ssh/authorized_keys if it doesn't already exists
    create: yes

- block:

  - name: Install APT package(s) required by the email external role
    # The base email role installs the dovecot-imapd and exim4 pacakges but the
    # email external role requires additional/different packages as follows:
    #  - The dovecot-lmtpd package is required so that we can use the sieve mail
    #    plugin to filter spam messages automatically.
    #  - The dovecot-sieve package provides the Dovecot Sieve plugin to provide
    #    mail filtering facilities at the time of final message delivery, which
    #    we use to filter spam.
    #  - The exim4-daemon-heavy package replaces the exim4 package for access to
    #    the Dovecot authentication drivers.
    ansible.builtin.apt:
      name:
        - ca-certificates
        - dovecot-lmtpd
        - dovecot-sieve
        - exim4-daemon-heavy
      install_recommends: no

# 2. IMAP
# -------

  - name: Disable plaintext Dovecot authentication
    # This disables all plaintext Dovecot authentication unless SSL/TLS is used
    # for the client connection to Dovecot.
    # TODO: Look into whether the Dovecot configuration should specify
    # ssl=required rather than ssl=yes.
    ansible.builtin.lineinfile:
      path: /etc/dovecot/conf.d/10-auth.conf
      regexp: '^#?disable_plaintext_auth = yes$'
      line: disable_plaintext_auth = yes
    notify: dovecot configuration changed

  - name: Enable login as an available Dovecot authentication mechanism
    # By default Dovecot only supports the PLAIN authentication mechanism. The
    # LOGIN mechanism is obsolete but still used by old Outlook versions and
    # some Microsoft phones.
    ansible.builtin.lineinfile:
      path: /etc/dovecot/conf.d/10-auth.conf
      regexp: '^auth_mechanisms = plain'
      line: auth_mechanisms = plain login
    notify: dovecot configuration changed

  - name: Make a folder to hold the Dovecot domain specific configurations
    # We will deploy a file for each domain that we supply an email service to
    # this folder. That file will contain the SSL certificate and private key
    # paths for that domain.
    ansible.builtin.file:
      path: /etc/dovecot/domains
      state: directory

  - name: Copy the Dovecot local.conf file
    # This file includes all files in /etc/dovecot/domains into the Dovecot
    # configuration - see the previous task.
    ansible.builtin.copy:
      src: dovecot-local.conf
      dest: /etc/dovecot/local.conf

# 3. SMTP inbound
# ---------------

  - name: Copy the Exim configuration for TLS on SMTP inbound connections
    ansible.builtin.copy:
      src: exim-main/tls_inbound
      dest: /etc/exim4/conf.d/main/00_exim4-config_tls_inbound
    notify:
      - exim configuration changed

  - name: Add TLS_ON_CONNECT_PORTS section to Exim's main config tlsoptions
    ansible.builtin.blockinfile:
      path: /etc/exim4/conf.d/main/03_exim4-config_tlsoptions
      insertafter: '^\.ifdef MAIN_TLS_ENABLE$'
      block: |-
        .ifdef TLS_ON_CONNECT_PORTS
          tls_on_connect_ports = TLS_ON_CONNECT_PORTS
        .endif
    notify:
      - exim configuration changed

  - name: Generate generic, fallback, self-signed certificate
    # The previous step "Copy the Exim config header file" defines two macros,
    # MAIN_TLS_CERTIFICATE and MAIN_TLS_PRIVATEKEY. These examine the tls_sni
    # value to assign a domain specific TLS certificate and private key pair. If
    # they fail to do this (for example, because the email client used doesn't
    # support SNI) then the logic in 03_exim4-config_tlsoptions within the main
    # Exim configuration section will fallback to this generic certificate and
    # private key pair instead.
    ansible.builtin.shell:
      cmd: >-
        openssl req -x509
        -newkey rsa:4096
        -keyout /etc/exim4/exim.key
        -out /etc/exim4/exim.crt
        -sha256
        -days 365
        -subj '/CN={{ home_domain }}'
        -nodes
        && chgrp Debian-exim /etc/exim4/exim.key /etc/exim4/exim.crt
        && chmod g+r /etc/exim4/exim.key /etc/exim4/exim.crt
      creates: /etc/exim4/exim.crt

  - name: Insert auth-client unix listener in the Dovecot auth service section
    # This provides the Dovecot authentication socket that Exim accesses to
    # delegate its authentication for inbound SMPT connections to Dovecot,
    ansible.builtin.blockinfile:
      path: /etc/dovecot/conf.d/10-master.conf
      insertafter: '^service auth {$'
      block: |-2
          unix_listener auth-client {
            user = Debian-exim
            mode = 0600
          }
      marker: "  # {mark} ANSIBLE MANAGED AUTH CLIENT BLOCK"
    notify: dovecot configuration changed

  - name: Install our required Exim server side authenticators
    # See the the file for more information.
    ansible.builtin.copy:
      src: exim-auth/server_side
      dest: /etc/exim4/conf.d/auth/10_exim4-config_server_side
    notify:
      - exim configuration changed

# 4. SMTP outbound
# ----------------

  - name: Copy the Exim configuration for TLS on SMTP outbound connections
    ansible.builtin.copy:
      src: exim-main/tls_outbound
      dest: /etc/exim4/conf.d/main/00_exim4-config_tls_outbound
    notify:
      - exim configuration changed

  - name: Comment all examples in Exim's 30_exim4-config_examples file
    # This disables the Exim client side authentication mechanisms that are
    # enabled by default so that we can conveniently replace them with the
    # client side authentication mechanisms as we want them while retaining the
    # examples for comparison..
    ansible.builtin.replace:
      path: /etc/exim4/conf.d/auth/30_exim4-config_examples
      # TODO: Make pattern match more robust
      # This works if:
      # 1. Where lines are commented the # is in the first column
      # 2. Empty lines are just that, i.e. they don't contain whitespace
      # Both are true in this file within the package NOW but it would be better
      # not to have to rely on that being the case.
      regexp: '^([^#\n].*)$'
      replace: '# \1'
    notify:
      - exim configuration changed

  - name: Install our required Exim client side authenticators
    # Having disabled the default Exim client side authentication mechanisms we
    # can now install our required client side authentication mechanisms. See
    # the file for more information.
    ansible.builtin.copy:
      src: exim-auth/client_side
      dest: /etc/exim4/conf.d/auth/20_exim4-config_client_side
    notify:
      - exim configuration changed

# 5. Delivering email to local domains
# ------------------------------------

  # TODO: Look into the benefit of using the Dovecot ManageSieve server
  # TODO: Invoke the relevant Dovecot reload/restart handlers

  - name: Copy the dovecot Exim router
    ansible.builtin.copy:
      src: exim-router/dovecot
      dest: /etc/exim4/conf.d/router/320_exim4-config_dovecot

  - name: Copy the dovecot_lmtp Exim transport
    ansible.builtin.copy:
      src: exim-transport/dovecot_lmtp
      dest: /etc/exim4/conf.d/transport/30_exim4-config_dovecot_lmtp

  - name: Create vmail user whose home directory holds virtual user mailboxes
    ansible.builtin.user:
      name: vmail
      shell: /usr/sbin/nologin

  - name: Fix ownership of home directory created in previous task
    ansible.builtin.file:
      path: /home/vmail
      owner: vmail
      group: vmail

  - name: Create users file to hold authentication details for virtual users
    ansible.builtin.file:
      path: /etc/dovecot/users
      state: touch
      owner: root
      group: dovecot
      mode: u=rw,g=r,o=

  - name: Put Ansible managed block markers around the lmtp unix listener config
    ansible.builtin.replace:
      path: /etc/dovecot/conf.d/10-master.conf
      # Matches these lines in the file with whitespace flexibility built in:
      #   unix_listener lmtp {
      #     #mode = 0666
      #   }
      # but NOT if immediately followed by the '# END' block marker to ensure
      # idempotency.
      regexp: "\
        (^\\s*unix_listener\\s+lmtp\\s+{[^\\S\n]*\n\
        \\s*#mode\\s*=\\s*0666[^\\S\n]*\n\
        \\s*}[^\\S\n]*$)\
        (?!# END)\
        "
      replace: |-2
          # BEGIN ANSIBLE MANAGED LMTP UNIX LISTENER BLOCK
        \1
          # END ANSIBLE MANAGED LMTP UNIX LISTENER BLOCK
    notify: dovecot configuration changed

  - name: Set the required mode and user for the lmtp unix listener
    ansible.builtin.blockinfile:
      path: /etc/dovecot/conf.d/10-master.conf
      block: |-2
          unix_listener lmtp {
            user = Debian-exim
            mode = 0666
          }
      marker: "  # {mark} ANSIBLE MANAGED LMTP UNIX LISTENER BLOCK"
    notify: dovecot configuration changed

  - name: Enable Dovecot's passwdfile auth mechanism
    ansible.builtin.lineinfile:
      path: /etc/dovecot/conf.d/10-auth.conf
      line: "!include auth-passwdfile.conf.ext"
      regexp: '^#?!include auth-passwdfile\.conf\.ext$'
    notify: dovecot configuration changed

#  - name: Disable Dovecot's system auth mechanism
#    ansible.builtin.lineinfile:
#      path: /etc/dovecot/conf.d/10-auth.conf
#      line: "#!include auth-system.conf.ext"
#      regexp: '^#?!include auth-system\.conf\.ext$'
#    notify: dovecot configuration changed

  - name: Set mail_uid and mail_gid to vmail
    ansible.builtin.lineinfile:
      path: /etc/dovecot/conf.d/10-mail.conf
      line: "{{ item }} = vmail"
      regexp: '^#?{{ item }} ='
    loop: [ mail_uid, mail_gid ]
    notify: dovecot configuration changed


# 6. Delivering email to non local domains
# ----------------------------------------

  - name: Copy the domain_smarthost Exim router
    ansible.builtin.copy:
      src: exim-router/domain_smarthost
      dest: "\
        /etc/exim4/conf.d/router/\
        175_exim4-config_domain_smarthost\
        "
    notify:
      - exim configuration changed

  - name: Copy the remote_smtp_domain_smarthost Exim transport
    ansible.builtin.copy:
      src: exim-transport/remote_smtp_domain_smarthost
      dest: "\
        /etc/exim4/conf.d/transport/\
        30_exim4-config_remote_smtp_smarthost_domain_smarthost\
        "
    notify:
      - exim configuration changed

  - name: Copy the skeleton domain.password.client file
    ansible.builtin.copy:
      src: domain.passwd.client
      dest: /etc/exim4/domain.passwd.client
      group: Debian-exim
      mode: '0640'
      # Don't copy if the destination file already exists. This role copies a
      # skeleton file. The domain_email role then adds line entries to the file
      # on a domain-by-domain basis. If we have cause to run this role again we
      # mustn't overwrite anything that the domain_email role has added.
      force: no

  become: yes
